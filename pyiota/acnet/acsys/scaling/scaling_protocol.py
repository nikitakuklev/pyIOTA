# Generated by the protocol compiler version 1.3.8
# DO NOT EDIT THIS FILE DIRECTLY!

__doc__ = 'Message serializer for the Scaling protocol.'

from itertools import chain, islice

__all__ = ['ProtocolError',
           'unmarshal_request',
           'unmarshal_reply',
           'ServiceDiscovery_request',
           'Scale_request',
           'ServiceDiscovery_reply',
           'Scale_reply']

import struct

class ProtocolError(Exception):
    """Exception class that gets raised when there's a problem marshaling
       or unmarshaling a message from the Scaling protocol."""

    def __init__(self, reason):
        self.reason = reason

    def __str__(self):
        return repr(self.reason)

# -- Internal marshalling routines --

def emitRawInt(tag, val):
    def emitEach(buf, n):
        curr = (val >> (n * 8)) & 0xff
        next = val >> ((n + 1) * 8)
        if (next == 0 and (curr & 0x80) != 0x80) or \
           (next == -1 and (curr & 0x80) == 0x80):
            buf.append(tag + n + 1)
        else:
            emitEach(buf, n + 1)
        buf.append(curr)
    tmp = bytearray()
    emitEach(tmp, 0)
    return bytes(tmp)

def marshal_int16(val):
    if isinstance(val, int):
        if val < 32768 and val > -32769:
            return emitRawInt(0x10, val)
        else:
            raise ProtocolError("value out of range for int16")
    else:
        raise ProtocolError("expected integer type")

def marshal_int32(val):
    if isinstance(val, int):
        if int(-2147483648) <= val <= int(2147483647):
            return emitRawInt(0x10, val)
        else:
            raise ProtocolError("value out of range for int32")
    else:
        raise ProtocolError("expected integer type")

def marshal_double(val):
    return chain(b'\x28', (ii for ii in struct.pack(">d", float(val))))

def marshal_string(val):
    if isinstance(val, str):
        return chain(emitRawInt(0x40, len(val)),\
                     (ord(ii) for ii in val))
    else:
        raise ProtocolError("expected string type")

def marshal_binary(val):
    if isinstance(val, (bytearray, bytes)):
        return chain(emitRawInt(0x30, len(val)), val)
    else:
        raise ProtocolError("expected bytearray type")

def marshal_array(fn, val):
    if isinstance(val, list):
        return chain(emitRawInt(0x50, len(val)),\
                     chain.from_iterable((fn(v) for v in val)))
    else:
        raise ProtocolError("expected list type")

class ServiceDiscovery_request:
    def __eq__(self, other):
        return True

    def __ne__(self, other):
        return False

    def marshal(self):
        """Returns a generator that emits a character stream representing
           the marshaled contents of ServiceDiscovery_request."""
        return chain(b'SDD\x02\x51\x03\x14\xbc\x96\x7d\xc2\x12\xdf\xda\x51\x00')

class Scale_request:
    def __init__(self):
        self.drf_request = ''

    def __eq__(self, other):
        return self.drf_request == other.drf_request and \
            ((not hasattr(self, 'raw') and not hasattr(other, 'raw')) or \
            (hasattr(self, 'raw') and hasattr(other, 'raw') and \
             self.raw == other.raw)) and \
            ((not hasattr(self, 'scaled') and not hasattr(other, 'scaled')) or \
            (hasattr(self, 'scaled') and hasattr(other, 'scaled') and \
             self.scaled == other.scaled))

    def __ne__(self, other):
        return not self.__eq__(other)

    def marshal(self):
        """Returns a generator that emits a character stream representing
           the marshaled contents of Scale_request."""
        return chain(b'SDD\x02\x51\x03\x14\xbc\x96\x7d\xc2\x12\xbe\xf8',
                     emitRawInt(0x50, 2 \
                        + (2 if hasattr(self, 'raw') else 0) \
                        + (2 if hasattr(self, 'scaled') else 0)),
                     b'\x12\x63\x24',
                     marshal_string(self.drf_request),
                     chain(b'\x12\x66\xaf',
                           marshal_binary(self.raw)) \
                           if hasattr(self, 'raw') else bytearray(),
                     chain(b'\x12\xa9\x9b',
                           marshal_array(marshal_double, self.scaled)) \
                           if hasattr(self, 'scaled') else bytearray())

class ServiceDiscovery_reply:
    def __init__(self):
        self.serviceLocation = ''

    def __eq__(self, other):
        return self.serviceLocation == other.serviceLocation

    def __ne__(self, other):
        return not self.__eq__(other)

    def marshal(self):
        """Returns a generator that emits a character stream representing
           the marshaled contents of ServiceDiscovery_reply."""
        return chain(b'SDD\x02\x51\x03\x14\xbc\x96\x7d\xc2\x12\xcd\x7e\x51\x02\x12\x11\xaf',
                     marshal_string(self.serviceLocation))

class Scale_reply:
    def __init__(self):
        self.status = int(0)

    def __eq__(self, other):
        return self.status == other.status and \
            ((not hasattr(self, 'raw') and not hasattr(other, 'raw')) or \
            (hasattr(self, 'raw') and hasattr(other, 'raw') and \
             self.raw == other.raw)) and \
            ((not hasattr(self, 'scaled') and not hasattr(other, 'scaled')) or \
            (hasattr(self, 'scaled') and hasattr(other, 'scaled') and \
             self.scaled == other.scaled))

    def __ne__(self, other):
        return not self.__eq__(other)

    def marshal(self):
        """Returns a generator that emits a character stream representing
           the marshaled contents of Scale_reply."""
        return chain(b'SDD\x02\x51\x03\x14\xbc\x96\x7d\xc2\x12\x44\xf9',
                     emitRawInt(0x50, 2 \
                        + (2 if hasattr(self, 'raw') else 0) \
                        + (2 if hasattr(self, 'scaled') else 0)),
                     b'\x12\x44\x54',
                     marshal_int16(self.status),
                     chain(b'\x12\x66\xaf',
                           marshal_binary(self.raw)) \
                           if hasattr(self, 'raw') else bytearray(),
                     chain(b'\x12\xa9\x9b',
                           marshal_array(marshal_double, self.scaled)) \
                           if hasattr(self, 'scaled') else bytearray())

def marshal_request(val):
    return val.marshal()

def marshal_reply(val):
    return val.marshal()

# -- Internal unmarshalling routines --

def consumeRawInt(ii, tag):
    iiTag = (ii.__next__())
    iiLen = iiTag & 0xf
    if (iiTag & 0xf0) == (tag & 0xf0) and iiLen > 0 and iiLen <= 8:
        firstByte = (ii.__next__())
        retVal = (0 if (0x80 & firstByte) == 0 else -256) | firstByte
        while iiLen > 1:
            retVal = (retVal << 8) | (ii.__next__())
            iiLen = iiLen - 1
        return int(retVal)
    else:
        raise ProtocolError("bad tag or length")

def unmarshal_int16(ii):
    val = consumeRawInt(ii, 0x10)
    if val >= -0x8000 and val < 0x8000:
        return int(val)
    else:
        raise ProtocolError("value out of range for int16")

def unmarshal_int32(ii):
    val = consumeRawInt(ii, 0x10)
    if int(-2147483648) <= val <= int(2147483647):
        return int(val)
    else:
        raise ProtocolError("value out of range for int32")

def unmarshal_double(ii):
    if ii.__next__() == 40:
        raw = bytearray(islice(ii, 8))
        v, = struct.unpack(">d", raw)
        return v
    else:
        raise ProtocolError("expected tag for double")

def unmarshal_string(ii):
    return bytearray(islice(ii, consumeRawInt(ii, 0x40))).decode('utf-8')

def unmarshal_binary(ii):
    return bytearray(islice(ii, consumeRawInt(ii, 0x30)))

def unmarshal_array(ii, fn):
    return [fn(ii) for x in range(consumeRawInt(ii, 0x50))]

def unmarshal_header(ii):
    if ii.__next__() != 83 or ii.__next__() != 68 or \
       ii.__next__() != 68 or ii.__next__() != 2 or \
       consumeRawInt(ii, 0x50) != 3:
        raise ProtocolError("invalid header")
    elif consumeRawInt(ii, 0x10) != -1130988094:
        raise ProtocolError("incorrect protocol specified")

def unmarshal_ServiceDiscovery_request(ii):
    if consumeRawInt(ii, 0x50) != 0:
        raise ProtocolError("incorrect number of fields")
    else:
        return ServiceDiscovery_request()

def unmarshal_Scale_request(ii):
    nFlds = consumeRawInt(ii, 0x50)
    if (nFlds % 2) != 0 or nFlds < 2 or nFlds > 6:
        raise ProtocolError("incorrect number of fields")
    else:
        tmp = Scale_request()
        for xx in range(nFlds // 2):
            fld = consumeRawInt(ii, 0x10)
            if fld == 25380:
                tmp.drf_request = unmarshal_string(ii)
            elif fld == 26287:
                tmp.raw = unmarshal_binary(ii)
            elif fld == -22117:
                tmp.scaled = unmarshal_array(ii, unmarshal_double)
            else:
                raise ProtocolError("unknown field found")
        return tmp

def unmarshal_ServiceDiscovery_reply(ii):
    nFlds = consumeRawInt(ii, 0x50)
    if nFlds != 2:
        raise ProtocolError("incorrect number of fields")
    else:
        tmp = ServiceDiscovery_reply()
        for xx in range(nFlds // 2):
            fld = consumeRawInt(ii, 0x10)
            if fld == 4527:
                tmp.serviceLocation = unmarshal_string(ii)
            else:
                raise ProtocolError("unknown field found")
        return tmp

def unmarshal_Scale_reply(ii):
    nFlds = consumeRawInt(ii, 0x50)
    if (nFlds % 2) != 0 or nFlds < 2 or nFlds > 6:
        raise ProtocolError("incorrect number of fields")
    else:
        tmp = Scale_reply()
        for xx in range(nFlds // 2):
            fld = consumeRawInt(ii, 0x10)
            if fld == 17492:
                tmp.status = unmarshal_int16(ii)
            elif fld == 26287:
                tmp.raw = unmarshal_binary(ii)
            elif fld == -22117:
                tmp.scaled = unmarshal_array(ii, unmarshal_double)
            else:
                raise ProtocolError("unknown field found")
        return tmp

def unmarshal_request(ii):
    """Attempts to unmarshal a request message from the specified
       generator, ii. If an error occurs, the ProtocolError exception
       will be raised."""
    try:
        unmarshal_header(ii)
        msg = consumeRawInt(ii, 0x10)
        if msg == -8230:
            return unmarshal_ServiceDiscovery_request(ii)
        elif msg == -16648:
            return unmarshal_Scale_request(ii)
        else:
            raise ProtocolError("unknown request type")
    except StopIteration:
        raise ProtocolError("unexpected end of input")

def unmarshal_reply(ii):
    """Attempts to unmarshal a reply message from the specified
       generator, ii. If an error occurs, the ProtocolError exception
       will be raised."""
    try:
        unmarshal_header(ii)
        msg = consumeRawInt(ii, 0x10)
        if msg == -12930:
            return unmarshal_ServiceDiscovery_reply(ii)
        elif msg == 17657:
            return unmarshal_Scale_reply(ii)
        else:
            raise ProtocolError("unknown reply type")
    except StopIteration:
        raise ProtocolError("unexpected end of input")
